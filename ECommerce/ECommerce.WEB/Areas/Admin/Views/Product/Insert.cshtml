@model ECommerce.WEB.Areas.Admin.Model.ProductManagement.ProductCRUDModel
@using ECommerce.CORE.Helper
@{
    ViewBag.Title = "Ürün Ekle";
    var data = Html.Raw(JsonHelper.Convert(Model));
}


@using (Html.BeginForm("Insert", "Product", FormMethod.Post, new { @id = "InsertProduct" }))
{


    <!-- basic form start -->
    <div class="col-12 mt-5" id="ProductApp">
        <div class="card">
            <div class="card-body">
                <h4 class="header-title">Ürün Ekle</h4>
                <form>

                    <div class="form-group">
                        @Html.LabelFor(s => s.Name, new { @class = "col-form-label" })

                        @Html.TextBoxFor(s => s.Name, new { @class = "form-control" })
                        <small id="emailHelp" class="form-text text-muted">
                            Ürünün Adı
                        </small>
                        @Html.ValidationMessageFor(s => s.Name)

                    </div>

                    <div class="form-group">
                        @Html.LabelFor(s => s.ShortName, new { @class = "col-form-label" })

                        @Html.TextBoxFor(s => s.ShortName, new { @class = "form-control" })
                        <small id="emailHelp" class="form-text text-muted">
                            Ürünün Kısa Adı
                        </small>
                        @Html.ValidationMessageFor(s => s.Name)

                    </div>

                    <div class="form-group">
                        @Html.LabelFor(s => s.Amount, new { @class = "col-form-label" })

                        @Html.TextBoxFor(s => s.Amount, new { @class = "form-control", type = "number", step = "0.01" })

                        <small id="emailHelp" class="form-text text-muted">
                            Ürün Tutarı
                        </small>
                        @Html.ValidationMessageFor(s => s.Amount)

                    </div>


                    <div class="form-group">
                        @Html.LabelFor(s => s.DiscountRate, new { @class = "col-form-label" })


                        @Html.TextBoxFor(s => s.DiscountRate, new { @class = "form-control", type = "number", step = "0.01" })


                        <small id="emailHelp" class="form-text text-muted">
                            İndirim Oranı
                        </small>
                        @Html.ValidationMessageFor(s => s.DiscountRate)

                    </div>



                    <div class="form-group">
                        <b class="text-muted mb-3 d-block">Kargo Ücreti Var mı ?</b>
                        <div class="custom-control custom-radio custom-control-inline">
                            @Html.RadioButtonFor(s => s.IsShipperPay, true, new Dictionary<string, object> {
                           { "class", "custom-control-input" },
                           { "min", "1" },
                           { "id", "IsShipperYes" },
                          {"v-on:change","IsCargoPay(true)" }
                          })
                            @*@Html.RadioButtonFor(s => s.IsShipperPay, true, new { @class = "custom-control-input",id= "IsShipperYes" })*@
                            <label class="custom-control-label" for="IsShipperYes">Evet</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline">
                            @Html.RadioButtonFor(s => s.IsShipperPay, false, new Dictionary<string, object> {
                            { "class", "custom-control-input" },
                            { "id", "IsShipperNo" },
                            {"v-on:change","IsCargoPay(false)" }

                           })
                            <label class="custom-control-label" for="IsShipperNo">Hayır</label>
                        </div>
                        @Html.ValidationMessageFor(s => s.IsShipperPay)
                    </div>
                    <div v-if="isHaveCargoPay">
                        <div class="form-group">
                            @Html.LabelFor(s => s.ShipperAmount, new { @class = "col-form-label" })

                            @Html.TextBoxFor(s => s.ShipperAmount, string.Empty, new { @class = "form-control", type = "number", step = "0.01" })

                            <small id="emailHelp" class="form-text text-muted">
                                Kargo Ücreti
                            </small>
                            @Html.ValidationMessageFor(s => s.ShipperAmount)

                        </div>

                        <div class="form-group">

                            @Html.ValidationMessageFor(s => s.Amount)

                            @Html.LabelFor(s => s.ShipperId, new { @class = "col-form-label" })

                            @Html.DropDownListFor(s => s.ShipperId, Model.ShipperList, string.Empty, new { @class = "form-control", })
                        </div>
                    </div>
                    <div class="form-group">

                        @Html.LabelFor(s => s.CategoryId, new { @class = "col-form-label" })
                        @Html.DropDownListFor(s => s.CategoryId, Model.CategoryList, string.Empty, new { @class = "form-control" })
                        @Html.ValidationMessageFor(s => s.CategoryId)
                    </div>
                    <div class="form-group">

                        @Html.LabelFor(s => s.ProductRequiredFieldListId, new { @class = "col-form-label" })
                        @Html.DropDownListFor(s => s.ProductRequiredFieldListId, Model.ProductRequiredFieldList, string.Empty, new { @class = "form-control", multiple = "" })
                        @Html.ValidationMessageFor(s => s.ProductRequiredFieldListId)
                    </div>

                    <div class="form-group">
                        <b class="text-muted mb-3 d-block">Ürün Özelliği</b>
                        <button @@click="cloneProperty" class="btn btn-success" type="button">Ekle</button>
                        <table class="table table-hover table-responsive-sm table-wrapper">
                            <tr v-for="(pmc, pmcIndex) in ProductMapPropertyCRUDModel" :key="pmcIndex">
                                <td>

                                    @Html.LabelFor(s => s.ProductMapPropertyCRUDModel.LastOrDefault().PrmProductPropertyId, new Dictionary<string, object> {
                                   { "v-bind:id", "'ProductMapPropertyCRUDModel[' + pmcIndex + '].PrmProductPropertyId'" },
                                    { "v-bind:name", "'ProductMapPropertyCRUDModel[' + pmcIndex + '].PrmProductPropertyId'" },
                                    { "class", "col-form-label" },
                                   })

                                    @Html.DropDownListFor(s => s.ProductMapPropertyCRUDModel.LastOrDefault().PrmProductPropertyId, Model.ProductPropertyList, string.Empty, new Dictionary<string, object> {
                                    { "id","PrmProductPropertyId" },
                                    { "v-bind:id", "'ProductMapPropertyCRUDModel[' + pmcIndex + '].PrmProductPropertyId'" },
                                    { "v-bind:name", "'ProductMapPropertyCRUDModel[' + pmcIndex + '].PrmProductPropertyId'" },
                                    { "class", "form-control selectize" },
                                    { ":class", "isEmpty(pmc.PrmProductPropertyId)" },
                                    { ":options", "ProductPropertyList" },
                                    { "data-placeholder", string.Empty },
                                    { "data-allow-clear", true },
                                    { "data-ajax-cache", "false" },
                                    { "v-model", "pmc.PrmProductPropertyId" },
                                })
                                    @Html.ValidationMessageFor(s => s.ProductMapPropertyCRUDModel.LastOrDefault().PrmProductPropertyId, string.Empty, new Dictionary<string, object> {
                                   { "v-bind:id", "'ProductMapPropertyCRUDModel[' + pmcIndex + '].PrmProductPropertyId'" },
                                    { "v-bind:name", "'ProductMapPropertyCRUDModel[' + pmcIndex + '].PrmProductPropertyId'" },
                                   })
                                </td>

                                <td>
                                    @Html.LabelFor(s => s.ProductMapPropertyCRUDModel.LastOrDefault().PrmProductPropertyId, new Dictionary<string, object> {
                                { "v-bind:id", "'ProductMapPropertyCRUDModel[' + pmcIndex + '].Value'" },
                                 { "v-bind:name", "'ProductMapPropertyCRUDModel[' + pmcIndex + '].Value'" },
                                 { "class", "col-form-label" },
                                })
                                    @Html.TextBoxFor(s => s.ProductMapPropertyCRUDModel.LastOrDefault().Value, new Dictionary<string, object> {
                                     { "class", "col-form-label  form-control" },
                                     { ":class", "isEmpty(pmc.Value)" },
                                     { "v-bind:id", "'ProductMapPropertyCRUDModel[' + pmcIndex + '].Value'" },
                                     { "v-bind:name", "'ProductMapPropertyCRUDModel[' + pmcIndex + '].Value'" },
                                     { "v-model", "pmc.Value" },
                                 })
                                    @Html.ValidationMessageFor(s => s.ProductMapPropertyCRUDModel.LastOrDefault().Value, string.Empty, new Dictionary<string, object> {
                                   { "v-bind:id", "'ProductMapPropertyCRUDModel[' + pmcIndex + '].Value'" },
                                    { "v-bind:name", "'ProductMapPropertyCRUDModel[' + pmcIndex + '].Value'" },
                                   })

                                </td>
                                <td>
                                    <button @@click="deleteProperty(pmcIndex)" class="btn btn-danger" type="button">Sil</button>
                                </td>
                            </tr>
                        </table>
                    </div>

                    <div class="form-group box-design">
                        @Html.LabelFor(s => s.Explanation, new { @class = "col-form-label" })
                        @*@Html.TextAreaFor(s => s.Explanation)*@
                        @Html.ValidationMessageFor(s => s.Explanation)
                        <textarea id="Explanation" name="Explanation"></textarea>

                    </div>

                    <div class="form-group">
                        @Html.LabelFor(s => s.ProductImageList, new { @class = "col-form-label" })
                        @Html.TextBoxFor(s => s.ProductImageList, new { @type = "File", multiple = "" })
                        @Html.ValidationMessageFor(s => s.ProductImageList)

                    </div>



                    <div class="form-group">
                        <input type="submit" class="btn btn-success" value="Kaydet" />

                    </div>



                </form>
            </div>
        </div>
    </div>
    <!-- basic form end -->



}


@section Scripts{


    <script src="~/Content/ckeditor/ckeditor.js"></script>
    <script src="https://unpkg.com/vue/dist/vue.js"></script>
    <script src="https://unpkg.com/axios@0.2.1/dist/axios.js"></script>
    <script src="~/Content/selectize/js/vue2-selectize.js"></script>

    <script src="~/Content/ckeditor/ckeditor.js"></script>
    <script src="~/Content/ckeditor/config.js"></script>

    <script>



        Jform("#InsertProduct","CK");


        var data = @(data);
        data.PropertyModel = [];
        data.isHaveCargoPay = false;

      var vue= new Vue({

            el: "#ProductApp",
           data: data,
           methods: {
               isEmpty: function (value) {
                   return value == null || value === '' || value == 'undefined' || value == undefined || (Array.isArray(value) && value.length == 0) ? 'empty' : '';
               },
               cloneProperty: function () {
                   var vm = this;
                   vm.ProductMapPropertyCRUDModel.push(['']);
                   $(function () {
                       $('select').selectize();
                   });
               },
               deleteProperty: function (index) {
                   var vm = this;
                   vm.ProductMapPropertyCRUDModel.splice(index, 1);
                   $(function () {
                       $('select').selectize();
                   });
               },
               IsCargoPay: function (result) {
                   var vm = this;
                   vm.isHaveCargoPay = result;
               },
            },
          mounted() {
          },
          computed: {

          },
          watch:{
          pmc(value) {
                  this.$emit('onchange', value);
                  console.log(value)
              // or generate/simulate a native events (not sure how, but its outside Vue's realm I think
              },
              ProductMapPropertyCRUDModel: function () {
                  console.log('ee')
              }

          }
       });

        CKEDITOR.replace('Explanation');
 
    </script>




}




